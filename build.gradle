plugins {
    id 'java-library'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

group = 'com.anonymize'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

// Enable toolchain support for testing on different Java versions
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Core dependencies
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    
    // For YAML configuration
    implementation 'org.yaml:snakeyaml:1.30'
    
    // NLP dependencies
    implementation 'org.apache.opennlp:opennlp-tools:1.9.4'
    
    // For model management
    implementation 'commons-io:commons-io:2.15.1'
    
    // DJL dependencies for Hugging Face integration
    implementation platform('ai.djl:bom:0.25.0')
    implementation 'ai.djl:api'
    implementation 'ai.djl:basicdataset'
    implementation 'ai.djl:model-zoo'
    implementation 'ai.djl.huggingface:tokenizers'
    implementation 'ai.djl.pytorch:pytorch-engine'
    implementation 'ai.djl.pytorch:pytorch-model-zoo'
    // Optional for native PyTorch acceleration if available
    // runtimeOnly 'ai.djl.pytorch:pytorch-native-auto'
    
    // For document format support (will be optional in the future)
    // implementation 'org.apache.pdfbox:pdfbox:2.0.27'
    // implementation 'org.apache.poi:poi:5.2.2'
    // implementation 'org.apache.poi:poi-ooxml:5.2.2'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
}

test {
    useJUnitPlatform()
    // Show standard out and standard error of the test JVM(s) on the console
    testLogging {
        showStandardStreams = true
    }
}

// Task to verify the project with Java 17
task testWithJava17(type: Test) {
    useJUnitPlatform()
    javaLauncher.set(javaToolchains.launcherFor {
        languageVersion.set(JavaLanguageVersion.of(17))
    })
    // Show standard out and standard error of the test JVM(s) on the console
    testLogging {
        showStandardStreams = true
    }
}

// Task to verify the project with Java 21
task testWithJava21(type: Test) {
    useJUnitPlatform()
    javaLauncher.set(javaToolchains.launcherFor {
        languageVersion.set(JavaLanguageVersion.of(21))
    })
    // Show standard out and standard error of the test JVM(s) on the console
    testLogging {
        showStandardStreams = true
    }
}

// Task to run tests on all supported Java versions
task testAllJavaVersions {
    dependsOn test
    dependsOn testWithJava17
    dependsOn testWithJava21
}

// For running command line interface
application {
    mainClass = 'com.anonymize.cli.AnonymizeCli'
}

// Configure javadoc to include all packages
javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    failOnError = false
}

// Create sources JAR
task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

// Create javadoc JAR
task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    dependsOn javadoc
}

// Configure publishing
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            artifact sourcesJar
            artifact javadocJar
            
            pom {
                name = 'Anonymize'
                description = 'A library for detecting and anonymizing PII in text'
                url = 'https://github.com/yourusername/anonymize'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'developer-id'
                        name = 'Developer Name'
                        email = 'developer@example.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/yourusername/anonymize.git'
                    developerConnection = 'scm:git:ssh://github.com/yourusername/anonymize.git'
                    url = 'https://github.com/yourusername/anonymize'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = 'localRepo'
            url = layout.buildDirectory.dir("repo")
        }
        
        // Uncomment to publish to Maven Central
        // maven {
        //     name = 'OSSRH'
        //     url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
        //     credentials {
        //         username = project.hasProperty('ossrhUsername') ? ossrhUsername : ''
        //         password = project.hasProperty('ossrhPassword') ? ossrhPassword : ''
        //     }
        // }
    }
}
